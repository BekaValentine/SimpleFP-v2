data Nat = Zero | Suc Nat end


let plus : Nat -> Nat -> Nat
  = \x -> \y ->
    case x of
    | Zero -> y
    | Suc x' -> Suc (plus x' y)
    end
end


let plus' : Nat -> Nat -> Nat where
  | plus' Zero y = y
  | plus' (Suc x) y = Suc (plus' x y)
end